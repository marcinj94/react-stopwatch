{"version":3,"sources":["components/Header/Header.js","components/Stopwatch/Buttons/Buttons.js","components/Stopwatch/Result/Result.js","components/Stopwatch/ResultsTable/SavedResult/SavedResult.js","components/Stopwatch/ResultsTable/ResultsTable.js","components/Stopwatch/Stopwatch.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","library","add","faPlay","faPause","faDownload","faTrashAlt","faStop","Buttons","props","btnValue","btnActive","react_fontawesome_index_es","icon","onClick","clickStartPause","clickSave","clickReset","clickCleanList","Result","miliseconds","concat","seconds","minutes","SavedResult","result","savedResults","slice","reverse","map","savedResult","Fragment","ResultsTable","length","ResultsTable_SavedResult_SavedResult","Stopwatch","Stopwatch_Buttons_Buttons","clickSaveResult","Stopwatch_Result_Result","Stopwatch_ResultsTable_ResultsTable","App","state","runStopwatch","_this","setState","prevState","handleButtonStartPauseClick","clearInterval","intervalIndex","setInterval","handleButtonResetClick","handleButtonSaveClick","handleButtonCleanListClick","components_Header_Header","components_Stopwatch_Stopwatch","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d818e8ff.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"header\">\r\n            <h1 className=\"header__title\">React.js Stopwatch</h1>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './Buttons.css';\r\n\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlay, faPause, faDownload, faTrashAlt, faStop } from '@fortawesome/free-solid-svg-icons';\r\n\r\nlibrary.add(faPlay, faPause, faDownload, faTrashAlt, faStop);\r\n\r\nconst Buttons = (props) => {\r\n\r\n    const btnValue = props.btnActive ? <FontAwesomeIcon icon=\"pause\" /> : <FontAwesomeIcon icon=\"play\" />;\r\n\r\n    return (\r\n\r\n        <div className=\"buttons\">\r\n\r\n            <button\r\n                className=\"startPause\"\r\n                onClick={props.clickStartPause}\r\n            >\r\n                {btnValue}\r\n            </button>\r\n\r\n            <button\r\n                onClick={props.clickSave}\r\n            >\r\n                <FontAwesomeIcon icon=\"download\" />\r\n            </button>\r\n\r\n            <button\r\n                onClick={props.clickReset}\r\n            >\r\n                <FontAwesomeIcon icon=\"stop\" />\r\n            </button>\r\n\r\n            <button\r\n                onClick={props.clickCleanList}\r\n            >\r\n                <FontAwesomeIcon icon=\"trash-alt\" />\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Buttons;","import React from 'react';\r\nimport './Result.css'\r\n\r\nconst Result = (props) => {\r\n\r\n    const miliseconds = props.miliseconds < 10 ? `0${props.miliseconds}` : props.miliseconds\r\n    const seconds = props.seconds < 10 ? `0${props.seconds}` : props.seconds\r\n    const minutes = props.minutes < 10 ? `0${props.minutes}` : props.minutes\r\n\r\n    return (\r\n        <div className=\"result\">\r\n            <span className=\"result__value\">\r\n                {minutes}:{seconds}:{miliseconds}\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Result;","import React from 'react';\r\n\r\nconst SavedResult = (props) => {\r\n\r\n    const result = props.savedResults.slice(0).reverse().map(savedResult => {\r\n        const miliseconds = savedResult.miliseconds < 10 ? `0${savedResult.miliseconds}` : savedResult.miliseconds;\r\n        const seconds = savedResult.seconds < 10 ? `0${savedResult.seconds}` : savedResult.seconds;\r\n        const minutes = savedResult.minutes < 10 ? `0${savedResult.minutes}` : savedResult.minutes\r\n        return (\r\n            <li>{minutes} : {seconds} : {miliseconds}</li>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <>\r\n            {result}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SavedResult;","import React from 'react';\r\nimport './ResultsTable.css';\r\nimport SavedResult from './SavedResult/SavedResult'\r\n\r\nconst ResultsTable = (props) => {\r\n    return (\r\n        props.savedResults.length <= 0 ? null : (\r\n            <div className=\"resultsTable\">\r\n                <h2>Saved results</h2>\r\n                <ul className=\"results__list\">\r\n                    <SavedResult\r\n                        savedResults={props.savedResults}\r\n                    />\r\n                </ul>\r\n            </div>\r\n        )\r\n    );\r\n};\r\n\r\nexport default ResultsTable;","import React from 'react';\r\nimport './Stopwatch.css';\r\nimport Buttons from './Buttons/Buttons';\r\nimport Result from './Result/Result';\r\nimport ResultsTable from './ResultsTable/ResultsTable';\r\n\r\nconst Stopwatch = (props) => {\r\n    return (\r\n        <div className=\"stopwatch\">\r\n            <Buttons\r\n                btnActive={props.btnActive}\r\n                clickStartPause={props.clickStartPause}\r\n                clickReset={props.clickReset}\r\n                clickSave={props.clickSaveResult}\r\n                clickCleanList={props.clickCleanList}\r\n            />\r\n            <Result\r\n                miliseconds={props.miliseconds}\r\n                seconds={props.seconds}\r\n                minutes={props.minutes}\r\n            />\r\n\r\n            <ResultsTable\r\n                savedResults={props.savedResults}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Stopwatch;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './Header/Header';\nimport Stopwatch from './Stopwatch/Stopwatch';\n\nclass App extends Component {\n\n  state = {\n    miliseconds: 0,\n    seconds: 0,\n    minutes: 0,\n    btnActive: false,\n    savedResults: [\n    ]\n  }\n\n  runStopwatch = () => {\n    if (this.state.miliseconds < 99) {\n      this.setState(prevState => ({\n        miliseconds: prevState.miliseconds + 1\n      }));\n    } else if (this.state.seconds >= 59) {\n      this.setState(prevState => ({\n        miliseconds: 0,\n        seconds: 0,\n        minutes: prevState.minutes + 1\n      }));\n    } else if (this.state.miliseconds >= 99) {\n      this.setState(prevState => ({\n        miliseconds: 0,\n        seconds: prevState.seconds + 1\n      }));\n    }\n  }\n\n  handleButtonStartPauseClick = () => {\n    if (this.state.btnActive) {\n      clearInterval(this.intervalIndex);\n    } else {\n      this.intervalIndex = setInterval(this.runStopwatch, 10)\n    }\n    this.setState(prevState => ({\n      btnActive: !prevState.btnActive\n    }));\n  }\n\n  handleButtonResetClick = () => {\n    this.setState((prevState) => ({\n      miliseconds: 0,\n      seconds: 0,\n      minutes: 0,\n      btnActive: false,\n    }));\n    clearInterval(this.intervalIndex);\n  }\n\n  handleButtonSaveClick = () => {\n    this.setState(prevState => {\n      const savedResults = prevState.savedResults.concat({\n        miliseconds: prevState.miliseconds,\n        seconds: prevState.seconds,\n        minutes: prevState.minutes\n      })\n      return {\n        savedResults\n      }\n    });\n  }\n\n  handleButtonCleanListClick = () => {\n    this.setState((prevState) => ({\n      savedResults: [],\n    }));\n  }\n\n  render() {\n    return (\n      <>\n        <Header />\n        <Stopwatch\n          miliseconds={this.state.miliseconds}\n          seconds={this.state.seconds}\n          minutes={this.state.minutes}\n          btnActive={this.state.btnActive}\n          savedResults={this.state.savedResults}\n          clickStartPause={this.handleButtonStartPauseClick}\n          clickReset={this.handleButtonResetClick}\n          clickSaveResult={this.handleButtonSaveClick}\n          clickCleanList={this.handleButtonCleanListClick}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}